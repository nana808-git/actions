version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 14
    commands:
      - echo Installed Nodejs .....
  pre_build:
    commands:
      - echo Exporting Environmental variable ....
      - REPOSITORY_URI=${repository_url}
      - IMAGE_REPO_NAME=${repository_name}
      - IMAGE_TAG=latest
      - TIME=$(date +"%Y%m%d_%H%m%S")
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 667736119737.dkr.ecr.us-east-1.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - echo $TIME
      - docker build -f ./server/Dockerfile -t $REPOSITORY_URI:$IMAGE_TAG --build-arg release_tag=$IMAGE_TAG .
      #- docker build -f ./server/Dockerfile -t $REPOSITORY_URI:$IMAGE_TAG -t $REPOSITORY_URI:$COMMIT_ID -t $REPOSITORY_URI:$COMMIT_REF --build-arg build_commit_hash=$COMMIT_REF --build-arg release_tag=$COMMIT_ID .
      #- cd server
      #- npm install && npm run migrate:latest
      #- cd ..
  post_build:
    commands:
      - echo Build completed on `date`
      - docker image ls
      #- docker image push --all-tags $REPOSITORY_URI/$IMAGE_REPO_NAME
      #- docker push $REPOSITORY_URI/IMAGE_REPO_NAME:$IMAGE_TAG
      #- docker push $REPOSITORY_URI:$COMMIT_REF
      #- docker push $REPOSITORY_URI:$COMMIT_ID
      - docker push $REPOSITORY_URI
      - echo Writing image definitions file...
      - printf '[{"name":"${cluster_name}-${environment}-node-api","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
  discard-paths: yes